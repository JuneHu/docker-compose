<?php

/**
 * @file
 * Contains cloud_system.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache\CacheBackendInterface;

/**
 * Implements hook_help().
 */
function cloud_system_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cloud_system module.
    case 'help.page.cloud_system':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides some global functions.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_mail().
 */
function cloud_system_mail($key, &$message, $params) {
  switch ($key) {
    case 'send_mail':
      $config = \Drupal::config('cloud_system.email_config');
      // $message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';.
      $message['headers']['X-Mailer'] = $config->get('xmailer');
      $message['from'] = isset($params['from']) ? $params['from'] : $config->get('mail');
      $message['from_name'] = isset($params['from_name']) ? $params['from_name'] : $config->get('from_name');
      $message['sender'] = isset($params['from']) ? $params['from'] : $config->get('mail');

      // For template.
      $message['logo'] = $config->get('logo');
      $message['ssl_protocol'] = $config->get('ssl_protocol');
      $message['userName'] = isset($params['userName']) ? $params['userName'] : $config->get('username');
      $message['platForm'] = isset($params['platForm']) ? $params['platForm'] : $config->get('platform');
      $message['needContactInfo'] = isset($params['needContactInfo']) ? $params['needContactInfo'] : $config->get('needContactInfo');

      // 只要保证Sender, From, Reply_To, Return-path一致,代发字样就不会出现。.
      $message['headers']['Sender'] = $config->get('mail');
      $message['headers']['From'] = $config->get('mail');
      $message['headers']['Reply-To'] = $config->get('mail');
      $message['headers']['Return-Path'] = $config->get('mail');

      $message['subject'] = isset($params['subject']) ? $params['subject'] : $config->get('subject');
      $message['body'] = $params['body'];

      $default_confs = [
        'smtp_server' => $config->get('smtp_host'),
        'smtp_user' => $config->get('mail'),
        'smtp_pwd' => $config->get('smtp_pass'),
        'smtp_port' => $config->get('smtp_port'),
      ];
      $message['conf'] = isset($params['conf']) ? $params['conf'] : $default_confs;
      $message['isQueue'] = isset($params['isQueue']) ? (int) $params['isQueue'] : 1;
      break;

    default:
      break;
  }
}

/**
 * Implements hook_theme().
 */
function cloud_system_theme() {
  return [
    'cloud_mail' => [
      'variables' => [
        'message' => [],
      ],
    ],
    // list resources.
    'restui_resource_info' => [
      'variables' => [
        'resource' => []
      ],
      'template' => 'restui-resource-info',
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function cloud_system_cron() {
  // Excute one time on every day.
  $statistics_timestamp = \Drupal::state()->get('day_timestamp') ? : 0;
  $request_time = \Drupal::time()->getRequestTime();
  // 只有API端去检测.
  if (($request_time - $statistics_timestamp) >= 86400 && \Drupal\cloud_system\CloudSystemUtils::isApi()) {
    $sms = \Drupal::service('sms.sender')->getUserInfo();

    // Send mail.
    $body = '白名单: ' . $sms->ip_whitelist
      . PHP_EOL . '<b>报警阀值:</b> ' . $sms->alarm_balance
      . PHP_EOL . '<b>余额: </b>' . $sms->balance;
    $mail = \Drupal::config('cloud_system.email_config')->get('default_mail');
    \Drupal::service('cloud_system.base')->sendMail($mail, [
      'subject' => 'SMS(yunpian)',
      'body'    => $body,
    ]);

    \Drupal::state()->set('day_timestamp', $request_time + 86400);
  }

}

/**
 * 记录日志
 *
 * @param string $message
 * @param string $type ok error.
 *
 * @return
 */
function drushLog($message, $type = 'ok') {
  return drush_log(date('Y-m-d G:i:s') . "： " . $message, $type);
}

/**
 * Prepares variables for mail templates.
 *
 * Default template: cloud_mail.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - message: An associative array containing the message array.
 *   - body: The processed body.
 */
function template_preprocess_cloud_mail(&$variables) {
  $variables['subject'] = $variables['message']['subject'];
  $variables['body'] = isset($variables['message']['body']) && !empty($variables['message']['body']) ? array_shift($variables['message']['body']) : (isset($variables['message']['params']['body']) ? $variables['message']['params']['body'] : '');
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Sets defaults for authentication and formats per HTTP method.
 */
function cloud_system_preprocess_restui_resource_info(&$variables) {
  $formats = \Drupal::getContainer()->getParameter('serializer.formats');
  $authentication_providers = array_keys(\Drupal::service('cloud_system.rest.authentication_collector')->getSortedProviders());
  foreach ($variables['resource'] as $method => $properties) {
    if (empty($properties['supported_formats'])) {
      $variables['resource'][$method]['supported_formats'] = $formats;
    }
    if (empty($properties['supported_auth'])) {
      $variables['resource'][$method]['supported_auth'] = $authentication_providers;
    }
  }
}

/**
 * Implements hook_file_url_alter().
 */
function cloud_system_file_url_alter(&$uri) {
  global $config;
  if (!isset($config['static.domain'])) {
    return false;
  }

  $resource_extensions = ['css', 'js', 'gif', 'jpg', 'jpeg', 'png'];
  // Most CDNs don't support private file transfers without a lot of hassle,
  // so don't support this in the common case.
  $schemes = ['public'];

  $scheme = \Drupal::service('file_system')->uriScheme($uri);

  // Only serve shipped files and public created files from the static_server.
  if(!$scheme || in_array($scheme, $schemes)) {
    // Shipped files.
    if(!$scheme) {
      $path = $uri;
    }
    // Public created files.
    else {
      $wrapper = \Drupal::service('stream_wrapper_manager')->getViaScheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
    }

    // Clean up Windows paths.
    $path = str_replace('\\', '/', $path);

    // Serve files with one of the resource extensions from resource_server
    $pathinfo = pathinfo($path);
    if(isset($pathinfo['extension']) && in_array($pathinfo['extension'], $resource_extensions)) {
      $uri = $config['static.domain'] . $path;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function cloud_system_entity_type_alter(array &$entity_types) {
  $entity_types['rest_resource_config']->setClass('\Drupal\cloud_system\Entity\RestResourceConfig');
}

/**
 * Gets the schema definition of a table, or the whole database schema.
 *
 * The returned schema will include any modifications made by any
 * module that implements hook_schema_alter().
 *
 * @param string $table
 *   The name of the table. If not given, the schema of all tables is returned.
 * @param bool $rebuild
 *   If TRUE, the schema will be rebuilt instead of retrieved from the cache.
 */
function cloud_system_get_schema($table = NULL, $rebuild = FALSE) {
  $schema = cloud_system_get_complete_schema($rebuild);
  if (!isset($table)) {
    return $schema;
  }

  if (isset($schema[$table])) {
    return $schema[$table];
  }

  return FALSE;
}

/**
 * Gets the whole database schema.
 *
 * The returned schema will include any modifications made by any
 * module that implements hook_schema_alter().
 *
 * @param bool $rebuild
 *   If TRUE, the schema will be rebuilt instead of retrieved from the cache.
 */
function cloud_system_get_complete_schema($rebuild = FALSE) {
  static $schema;

  if (!isset($schema) || $rebuild) {
    // Try to load the schema from cache.
    if (!$rebuild && $cached = \Drupal::cache()->get('schema')) {
      $schema = $cached->data;
    }
    // Otherwise, rebuild the schema cache.
    else {
      $schema = [];
      // Load the .install files to get hook_schema.
      \Drupal::moduleHandler()->loadAllIncludes('install');

      // Invoke hook_schema for all modules.
      foreach (Drupal::moduleHandler()->getImplementations('schema') as $module) {

        // Cast the result of hook_schema() to an array, as a NULL return value
        // would cause array_merge() to set the $schema variable to NULL as well.
        // That would break modules which use $schema further down the line.
        $schemas = \Drupal::moduleHandler()->invoke($module, 'schema');
        if (!empty($schemas)) {
          foreach ($schemas as $table => $value) {
            $schema[$table] = $value;
          }
        }
      }

      if ($rebuild) {
        \Drupal::service('cache_tags.invalidator')
          ->invalidateTags(['schema']);
      }
      // If the schema is empty, avoid saving it: some database engines require
      // the schema to perform queries, and this could lead to infinite loops.
      if (!empty($schema)) {
        \Drupal::cache()->set('schema', $schema, CacheBackendInterface::CACHE_PERMANENT, ['schema']);
      }
    }
  }

  return $schema;
}
